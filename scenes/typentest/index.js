import PageHeader from "../../layouts/header/Header";
import MobileHeader from "../../layouts/mobile-header/MobileHeader";
import Footer from "../../layouts/footer/Footer";
import { Space, Spin, Steps } from "antd";
import StepOne from "./steps/step1/StepOne";
import StepTwo from "./steps/step2/StepTwo";
import StepThree from "./steps/step3/StepThree";
import StepFour from "./steps/step4/StepFour";
import { useState, useEffect } from "react";
import { useRouter } from "next/router";
import { useDispatch, useSelector } from "react-redux";
import { getUserDataFromLocalStorage } from "../../services/actions/auth";
import {
  getTypentestPageData,
  getTypentestStepOneData,
  getTypentestStepTwoData,
  getTypentestStepThreeData,
  getTypentestStepFourData,
} from "../../services/actions/typentest";
import { faArrowLeft, faArrowRight } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { addParameters } from "../../services/actions/ergebnis";

const { Step } = Steps;
const TypentestScene = () => {
  const dispatch = useDispatch();
  const lang = useSelector((state) => state.header.headerLanguage);
  const {
    typentestPageData,
    typentestPageLoading,
    typentestStepOneData,
    typentestStepTwoData,
    typentestStepThreeData,
    typentestStepFourData,
  } = useSelector((state) => state.typentest);
  const [current, setCurrent] = useState(0);
  const [stepNum, setStepnum] = useState(1);
  const [gender, setGender] = useState("");
  const [favorites, setFavorites] = useState([]);
  const [occasions, setOccasions] = useState([]);
  const [styles, setStyles] = useState([]);
  const router = useRouter();

  const next = () => {
    if (current < steps.length - 1) {
      setCurrent(current + 1);
    }
    if (stepNum < steps.length) {
      setStepnum(stepNum + 1);
    }
    if (stepNum < 4) {
      router.push({
        pathname: `/typentest/step${stepNum}`,
      });
    } else {
      let parameters = [];
      parameters.push({
        type: "gender",
        value: gender,
      });
      favorites?.map((favorite, i) => {
        parameters.push({
          type: "favorite",
          value: favorite?.id,
        });
      });
      occasions?.map((occasion, i) => {
        parameters.push({
          type: "occasion",
          value: occasion?.id,
        });
      });
      styles?.map((style, i) => {
        parameters.push({
          type: "style",
          value: style?.id,
        });
      });
      dispatch(addParameters(parameters));
      router.push({
        pathname: `/ergebnis`,
      });
    }
  };
  const prev = () => {
    if (current > 0) {
      setCurrent(current - 1);
    }
    if (stepNum > 1) {
      setStepnum(stepNum - 1);
    }
    router.push({
      pathname: `/typentest/step${stepNum}`,
    });
  };
  const [steps, setSteps] = useState([
    { id: 0, step: true },
    { id: 1, step: false },
    { id: 2, step: false },
    { id: 3, step: false },
  ]);

  useEffect(() => {
    router.push({
      pathname: `/typentest/step${stepNum}`,
    });
    window.scrollTo(0, 0);
  }, [stepNum, current]);
  useEffect(() => {
    dispatch(getUserDataFromLocalStorage());
  }, []);
  useEffect(() => {
    dispatch(getTypentestPageData(lang));
    dispatch(getTypentestStepOneData(lang));
    dispatch(getTypentestStepTwoData(lang));
    dispatch(getTypentestStepThreeData(lang));
    dispatch(getTypentestStepFourData(lang));
  }, [lang]);
  return (
    <>
      <PageHeader />
      <MobileHeader />
      {typentestPageLoading ? (
        <div className={"loader__component"}>
          <Space size="middle">
            <Spin size="large" />
          </Space>
        </div>
      ) : (
        <>
          <div className={"typentest__step__scene__body"}>
            <div className={"typentest__step__scene__body__header"}>
              <Steps
                current={current}
                responsive={true}
                labelPlacement={"vertical"}
              >
                {steps.map((e, i) => {
                  return (
                    <Step
                      title={
                        i === 0
                          ? typentestPageData?.step_number_one
                          : i === 1
                          ? typentestPageData?.step_number_two
                          : i === 2
                          ? typentestPageData?.step_number_three
                          : typentestPageData?.step_number_four
                      }
                      num={e.id}
                      key={i}
                      status={current === stepNum - 1 ? "wait" : "current"}
                    />
                  );
                })}
              </Steps>

              <div className={"typentest__step__scene__body__scenes"}>
                {router.query.id === "step1" ? (
                  <StepOne
                    typentestPageData={typentestPageData}
                    typentestStepOneData={typentestStepOneData}
                    gender={gender}
                    setGender={setGender}
                  />
                ) : router.query.id === "step2" ? (
                  <StepTwo
                    typentestPageData={typentestPageData}
                    typentestStepTwoData={typentestStepTwoData}
                    favorites={favorites}
                    setFavorites={setFavorites}
                  />
                ) : router.query.id === "step3" ? (
                  <StepThree
                    typentestPageData={typentestPageData}
                    typentestStepThreeData={typentestStepThreeData}
                    occasions={occasions}
                    setOccasions={setOccasions}
                  />
                ) : (
                  <StepFour
                    typentestPageData={typentestPageData}
                    typentestStepFourData={typentestStepFourData}
                    styles={styles}
                    setStyles={setStyles}
                  />
                )}
              </div>
            </div>
          </div>
          <div className={"typentest__buttons"}>
            {current > 0 && (
              <button onClick={prev} className={"typentest__buttons__prev"}>
                <FontAwesomeIcon
                  icon={faArrowLeft}
                  className={"head-search-icon"}
                />{" "}
                {typentestPageData?.step_button_back}
              </button>
            )}
            <div style={current > 0 ? { display: "none" } : null}></div>
            {current >= 3 ? (
              <button onClick={next} className={"typentest__buttons__next"}>
                {typentestPageData?.step_button_end}{" "}
              </button>
            ) : (
              <button onClick={next} className={"typentest__buttons__next"}>
                {typentestPageData?.step_button_forward}{" "}
                <FontAwesomeIcon
                  icon={faArrowRight}
                  className={"head-search-icon"}
                />
              </button>
            )}
          </div>
        </>
      )}
      <Footer />
    </>
  );
};

export default TypentestScene;
