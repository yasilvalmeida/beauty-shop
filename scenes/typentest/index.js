import { Steps } from "antd";
import StepOne from "./steps/step1/StepOne";
import StepTwo from "./steps/step2/StepTwo";
import StepThree from "./steps/step3/StepThree";
import StepFour from "./steps/step4/StepFour";
import { useState, useEffect } from "react";
import { useRouter } from "next/router";
import { useDispatch, useSelector } from "react-redux";
import { getUserDataFromLocalStorage } from "../../services/actions/auth";
import { Spin, Space } from "antd";
import { faArrowLeft, faArrowRight } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { addParameters } from "../../services/actions/ergebnis";

const { Step } = Steps;
const TypentestScene = () => {
  const dispatch = useDispatch();
  const headLoaded = useSelector((state) => state.news.newsReportLoading);
  useEffect(() => {
    dispatch(getUserDataFromLocalStorage());
  }, []);
  const [current, setCurrent] = useState(0);
  const [stepNum, setStepnum] = useState(1);
  const [gender, setGender] = useState("");
  const [favorites, setFavorites] = useState([]);
  const [occasions, setOccasions] = useState([]);
  const [styles, setStyles] = useState([]);
  const router = useRouter();
  const [loaded, setLoaded] = useState(false);

  const next = () => {
    if (current < steps.length - 1) {
      setCurrent(current + 1);
    }
    if (stepNum < steps.length) {
      setStepnum(stepNum + 1);
    }
    if (stepNum < 4) {
      router.push({
        pathname: `/typentest/step${stepNum}`,
      });
    } else {
      let parameters = [gender];
      favorites?.map((favorite, i) => {
        parameters.push(favorite?.text?.toUpperCase());
      });
      occasions?.map((occasion, i) => {
        parameters.push(occasion?.text?.toUpperCase());
      });
      styles?.map((style, i) => {
        parameters.push(style?.text?.toUpperCase());
      });
      dispatch(addParameters(parameters));
      router.push({
        pathname: `/ergebnis`,
      });
    }
  };
  const prev = () => {
    if (current > 0) {
      setCurrent(current - 1);
    }
    if (stepNum > 1) {
      setStepnum(stepNum - 1);
    }
    router.push({
      pathname: `/typentest/step${stepNum}`,
    });
  };
  const [steps, setSteps] = useState([
    { id: 0, step: true, name: "Geschlecht" },
    { id: 1, step: false, name: "Favoriten" },
    { id: 2, step: false, name: "AnlÃ¤sse" },
    { id: 3, step: false, name: "Stile" },
  ]);
  useEffect(() => {
    router.push({
      pathname: `/typentest/step${stepNum}`,
    });
    window.scrollTo(0, 0);
    setLoaded(true);
    setTimeout(() => {
      setLoaded(false);
    }, 3000);
  }, [stepNum, current]);
  return (
    <>
      <div className={"typentest__step__scene__body"}>
        <div className={"typentest__step__scene__body__header"}>
          <Steps
            current={current}
            responsive={true}
            labelPlacement={"vertical"}
          >
            {steps.map((e, i) => {
              return (
                <Step
                  title={e.name}
                  num={e.id}
                  key={i}
                  status={current === stepNum - 1 ? "wait" : "current"}
                />
              );
            })}
          </Steps>

          <div className={"typentest__step__scene__body__scenes"}>
            {loaded ? (
              <div className={"loader__component"}>
                <Space size="middle">
                  <Spin size="large" />
                </Space>
              </div>
            ) : router.query.id === "step1" ? (
              <StepOne gender={gender} setGender={setGender} />
            ) : router.query.id === "step2" ? (
              <StepTwo favorites={favorites} setFavorites={setFavorites} />
            ) : router.query.id === "step3" ? (
              <StepThree occasions={occasions} setOccasions={setOccasions} />
            ) : (
              <StepFour styles={styles} setStyles={setStyles} />
            )}
          </div>
        </div>
      </div>
      <div className={"typentest__buttons"}>
        {current > 0 && (
          <button onClick={prev} className={"typentest__buttons__prev"}>
            <FontAwesomeIcon
              icon={faArrowLeft}
              className={"head-search-icon"}
            />{" "}
            ZurÃ¼ck
          </button>
        )}
        <div style={current > 0 ? { display: "none" } : null}></div>
        {current >= 3 ? (
          <button onClick={next} className={"typentest__buttons__next"}>
            Ergebnis anzeigen
          </button>
        ) : (
          <button onClick={next} className={"typentest__buttons__next"}>
            Weiter{" "}
            <FontAwesomeIcon
              icon={faArrowRight}
              className={"head-search-icon"}
            />
          </button>
        )}
      </div>
    </>
  );
};

export default TypentestScene;
