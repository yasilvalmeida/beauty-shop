import {Steps} from "antd";
import StepOne from "./steps/step1/StepOne";
import StepTwo from "./steps/step2/StepTwo";
import StepThree from "./steps/step3/StepThree";
import StepFour from "./steps/step4/StepFour";
import {useState, useEffect} from "react"
import {useRouter} from "next/router";
import {useDispatch} from "react-redux";
import {getUserDataFromLocalStorage} from "../../services/actions/auth";

const {Step} = Steps;
const TypentestScene = () => {
    const dispatch = useDispatch()
    useEffect(() => {
        dispatch(getUserDataFromLocalStorage());
    }, []);
    const [current, setCurrent] = useState(0)
    const [stepNum, setStepnum] = useState(1)
    const router = useRouter()
    const [loaded, setLoaded] = useState(false)
    const next = () => {
        if (current < steps.length - 1) {
            setCurrent(current + 1);
        }
        if (stepNum < steps.length) {
            setStepnum(stepNum + 1)
        }
        router.push({
            pathname: `/typentest/step${stepNum}`,
        })

    };
    const prev = () => {
        if (current > 0) {
            setCurrent(current - 1);
        }
        if (stepNum > 1) {
            setStepnum(stepNum - 1)
        }
        router.push({
            pathname: `/typentest/step${stepNum}`,
        })
    };
    const [steps, setSteps] = useState([
        {id: 0, step: true, name: "Bestellübersicht"},
        {id: 1, step: false, name: "Lieferung"},
        {id: 2, step: false, name: "Bezahlung"},
        {id: 3, step: false, name: "Bestätigung"},
    ])
    useEffect(() => {

        router.push({
            pathname: `/typentest/step${stepNum}`,
        })
        window.scrollTo(0, 0)
        setLoaded(true)
        setTimeout(() => {
            setLoaded(false)
        }, 3000)

    }, [stepNum, current])
    return (
        <>
            <div className={"typentest__step__scene__body"}>
                <div className={"typentest__step__scene__body__header"}>
                    <Steps current={current} responsive={false} labelPlacement={"vertical"}>
                        {steps.map((e, i) => {
                            return (
                                <Step title={e.name} num={e.id} key={i}
                                      status={current === stepNum - 1 ? "wait" : "current"}/>
                            )
                        })}
                    </Steps>

                    <div className={"typentest__step__scene__body__scenes"}>
                        {loaded && <div className={"typentest__step__scene__body__scenes__loaded"}>Loading ...</div>}
                        {router.query.id === "step1" && <StepOne/>}
                        {router.query.id === "step2" && <StepTwo/>}
                        {router.query.id === "step3" && <StepThree/>}
                        {router.query.id === "step4" && <StepFour/>}
                    </div>

                </div>
            </div>
            <div className={"typentest__buttons"}>
                {current > 0 && <button onClick={prev} className={"typentest__buttons__prev"}>Zurück</button>}
                <div style={current > 0 ? {display: "none"} : null}></div>
                <button onClick={next}
                        className={"typentest__buttons__next"}>{current >= 3 ? "Ergebnis anzeigen" : "Weiter"}</button>
            </div>
        </>
    )
}

export default TypentestScene